{
  "version": "2",
  "templates": [
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "AdGuard Home is a network-wide software for blocking ads & tracking.",
      "image": "adguard/adguardhome:beta",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/adguardhome-logo.png",
      "name": "adguardhome",
      "hostname": "adguardhome",
      "network": "bunni_network",
      "officialDoc": "https://github.com/AdguardTeam/AdGuardHome/wiki/Docker",
      "platform": "linux",
      "ports": [
        "53:53/tcp",
        "53:53/udp",
        "67:67/udp",
        "68:68/udp",
        "80:80/tcp",
        "443:443/tcp",
        "443:443/udp",
        "3000:3000/tcp",
        "853:853/tcp",
        "784:784/udp",
        "853:853/udp",
        "8853:8853/udp",
        "5443:5443/tcp",
        "5443:5443/udp"
      ],
      "restart_policy": "unless-stopped",
      "title": "AdGuardHome",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/AdGuardHome/config",
          "container": "/opt/adguardhome/conf"
        },
        {
          "bind": "/mnt/Docker/AdGuardHome/work",
          "container": "/opt/adguardhome/work"
        }
      ],
      "webpage": "https://adguard.com/en/adguard-home/overview.html"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Adguardhome-sync is a tool to synchronize AdGuardHome config to replica instances.",
      "image": "linuxserver/adguardhome-sync:latest",
      "registry": "lscr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/adguardhomesync-logo.png",
      "name": "adguardhome-sync",
      "hostname": "adguardhome-sync",
      "network": "bunni_network",
      "officialDoc": "https://github.com/linuxserver/docker-adguardhome-sync#usage",
      "platform": "linux",
      "ports": [
        "8080:8080/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "AdGuardHome-Sync",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/AdGuardHomeSync",
          "container": "/config"
        }
      ],
      "webpage": "https://github.com/bakito/adguardhome-sync/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "C# application with primary purpose of farming Steam cards from multiple accounts simultaneously.",
      "image": "justarchinet/archisteamfarm:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/archisteamfarm-logo.png",
      "name": "archisteamfarm",
      "hostname": "archisteamfarm",
      "network": "bunni_network",
      "officialDoc": "https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Docker/",
      "platform": "linux",
      "ports": [
        "1242:1242/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "ArchiSteamFarm",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/ArchiSteamFarm/config",
          "container": "/app/config"
        },
        {
          "bind": "/mnt/Docker/ArchiSteamFarm/plugins",
          "container": "/app/plugins"
        },
        {
          "bind": "/mnt/Docker/ArchiSteamFarm/logs",
          "container": "/app/logs"
        }
      ],
      "webpage": "https://github.com/JustArchiNET/ArchiSteamFarm/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "An open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal.",
      "image": "authelia/authelia:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/authelia-logo.png",
      "name": "authelia",
      "hostname": "authelia",
      "network": "bunni_network",
      "note": "Requires a configuration.yml file in order to work. Documentation is Available <a href='https://www.authelia.com/integration/deployment/introduction/'>here</a>.",
      "officialDoc": "https://www.authelia.com/configuration/prologue/introduction/",
      "platform": "linux",
      "ports": [
        "9091:9091/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Authelia",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Authelia",
          "container": "/config"
        }
      ],
      "webpage": "https://www.authelia.com/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Automation for downloads.",
      "image": "autobrr/autobrr:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/autobrr-logo.png",
      "name": "autobrr",
      "hostname": "autobrr",
      "network": "bunni_network",
      "officialDoc": "https://autobrr.com/installation/docker",
      "platform": "linux",
      "ports": [
        "7474:7474/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Autobrr",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Autobrr/config",
          "container": "/config"
        }
      ],
      "webpage": "https://github.com/autobrr/autobrr"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "COLLECTIONS",
          "label": "COLLECTIONS",
          "default": "crowdsecurity/nginx LePresidente/authelia",
          "description": "Collections to install from the hub, separated by space"
        }
      ],
      "description": "Crowdsec - An open-source, lightweight agent to detect and respond to bad behaviours. It also automatically benefits from our global community-wide IP reputation database.",
      "image": "crowdsecurity/crowdsec:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/crowdsec-logo.png",
      "name": "crowdsec",
      "hostname": "crowdsec",
      "network": "bunni_network",
      "note": "Create a acquis.yaml and fill it out with concepts from https://docs.crowdsec.net/docs/concepts/#acquisition",
      "officialDoc": "https://hub.docker.com/r/crowdsecurity/crowdsec",
      "platform": "linux",
      "ports": [
        "8080:8080/tcp"
      ],
      "labels": [
        {
          "name": "com.docker.compose.depends_on",
          "value": "swag:service_started"
        }
      ],
      "restart_policy": "unless-stopped",
      "title": "Crowdsec",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Crowdsec/crowdsec-config",
          "container": "/etc/crowdsec"
        },
        {
          "bind": "/mnt/Docker/Crowdsec/crowdsec-db",
          "container": "/var/lib/crowdsec/data"
        },
        {
          "bind": "/mnt/Docker/Crowdsec/acquis.yaml",
          "container": "/etc/crowdsec/acquis.yaml"
        },
        {
          "bind": "/mnt/Docker/Swag/log/nginx",
          "container": "/var/log/nginx"
        },
        {
          "bind": "/mnt/Docker/Authelia/authelia.log",
          "container": "/var/log/Authelia.log"
        },
        {
          "bind": "/etc/timezone",
          "container": "/etc/timezone"
        },
        {
          "bind": "/etc/localtime",
          "container": "/etc/localtime"
        }
      ],
      "webpage": "https://github.com/crowdsecurity/crowdsec"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "RUN_AT",
          "label": "RUN_AT",
          "default": "0 9 * * 0",
          "description": "CRON command"
        },
        {
          "label": "CUSTOM_LANGUAGE",
          "name": "CUSTOM_LANGUAGE",
          "select": [
            {
              "default": "en",
              "text": "English",
              "value": "en"
            },
            {
              "text": "Chinese",
              "value": "zh"
            }
          ]
        }
      ],
      "description": "Automatically renew your freenom domain. ",
      "image": "luolongfei/freenom:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/freenom-logo.png",
      "name": "freenom",
      "hostname": "freenom",
      "network": "bunni_network",
      "officialDoc": "https://hub.docker.com/r/luolongfei/freenom",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Freenom",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Freenom/config",
          "container": "/conf"
        },
        {
          "bind": "/mnt/Docker/Freenom/log",
          "container": "/app/logs"
        }
      ],
      "webpage": "https://github.com/luolongfei/freenom"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Homarr is a simple and lightweight homepage for your server, that helps you easily access all of your services in one place.",
      "image": "ajnart/homarr:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/homarr-logo.png",
      "name": "homarr",
      "hostname": "homarr",
      "network": "bunni_network",
      "officialDoc": "https://homarr.vercel.app/docs/introduction/installation#-installation-using-docker",
      "platform": "linux",
      "ports": [
        "7575:7575/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Homarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Homarr/configs",
          "container": "/app/data/configs"
        },
        {
          "bind": "/mnt/Docker/Homarr/icons",
          "container": "/app/public/icons"
        }
      ],
      "webpage": "https://github.com/ajnart/homarr"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "joal-conf",
          "label": "joal-conf",
          "default": "/data",
          "description": "required argument: path to the joal-conf folder (ie: /home/anthony/joal-conf)"
        },
        {
          "name": "spring.main.web-environment",
          "label": "spring.main.web-environment",
          "default": "true",
          "description": "enable the web context"
        },
        {
          "name": "server.port",
          "label": "server.port",
          "default": "7073",
          "description": "port to be used for both HTTP and WebSocket connection"
        },
        {
          "name": "joal.ui.path.prefix",
          "label": "joal.ui.path.prefix",
          "default": "joal",
          "description": "use your own complicated path here (this will be your first layer of security to keep joal secret). This is security though obscurity, but it is required in our case. This must contains only alphanumeric characters (no slash, backslash, or any other non-alphanum char)"
        },
        {
          "name": "joal.ui.secret-token",
          "label": "joal.ui.secret-token",
          "default": "change-me",
          "description": "your own secret token here (this is some kind of a password, choose a complicated one)"
        }
      ],
      "description": "An open source command line RatioMaster with an optional WebUI.",
      "image": "anthonyraymond/joal:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/joal-logo.png",
      "name": "joal",
      "hostname": "joal",
      "network": "bunni_network",
      "officialDoc": "https://github.com/anthonyraymond/joal#2-run-with-docker",
      "platform": "linux",
      "ports": [
        "7073:7073/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Joal",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Joal",
          "container": "/data"
        }
      ],
      "webpage": "https://github.com/anthonyraymond/joal"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "command": "-B 0.0.0.0:31337 -p /kitana -P",
      "description": "A responsive Plex plugin web frontend",
      "image": "pannal/kitana:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/kitana-logo.png",
      "name": "kitana",
      "hostname": "kitana",
      "network": "bunni_network",
      "officialDoc": "https://github.com/pannal/Kitana#docker-the-easy-way-windows-included",
      "platform": "linux",
      "ports": [
        "31337:31337/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Kitana",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Kitana",
          "container": "/app/data"
        }
      ],
      "webpage": "https://github.com/pannal/Kitana"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "WEB_CONCURRENCY",
          "label": "WEB_CONCURRENCY",
          "default": "2",
          "description": "Override the automatic definition of number of workers."
        },
        {
          "name": "MAX_WORKERS",
          "label": "MAX_WORKERS",
          "default": "8",
          "description": "Set the maximum number of workers to use. Default is not set meaning unlimited."
        },
        {
          "name": "RECIPE_PUBLIC",
          "label": "RECIPE_PUBLIC",
          "default": "true",
          "description": "Default Recipe Settings - Make Recipe Public."
        },
        {
          "name": "RECIPE_SHOW_NUTRITION",
          "label": "RECIPE_SHOW_NUTRITION",
          "default": "true",
          "description": "Default Recipe Settings - Show Recipe Nutrition."
        },
        {
          "name": "RECIPE_SHOW_ASSETS",
          "label": "RECIPE_SHOW_ASSETS",
          "default": "true",
          "description": "Default Recipe Settings - Show Recipe Assets."
        },
        {
          "name": "RECIPE_LANDSCAPE_VIEW",
          "label": "RECIPE_LANDSCAPE_VIEW",
          "default": "true",
          "description": "Default Recipe Settings - Set Landscape View."
        },
        {
          "name": "RECIPE_DISABLE_COMMENTS",
          "label": "RECIPE_DISABLE_COMMENTS",
          "default": "false",
          "description": "Default Recipe Settings - Disable Comments."
        },
        {
          "name": "RECIPE_DISABLE_AMOUNT",
          "label": "RECIPE_DISABLE_AMOUNT",
          "default": "false",
          "description": "Default Recipe Settings - Disable Amount."
        }
      ],
      "description": "A self-hosted recipe manager and meal planner",
      "image": "hkotel/mealie:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/mealie-logo.png",
      "name": "mealie",
      "hostname": "mealie",
      "network": "bunni_network",
      "note": "Default Credentials: Username: changeme@email.com Password: MyPassword. Documentation is Available <a href='https://hay-kot.github.io/mealie/documentation/getting-started/install/'>here</a>.",
      "officialDoc": "https://hay-kot.github.io/mealie/documentation/getting-started/install/",
      "platform": "linux",
      "ports": [
        "9925:80/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Mealie",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Mealie",
          "container": "/app/data"
        }
      ],
      "webpage": "https://hay-kot.github.io/mealie/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Nginx Proxy Manager enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.",
      "image": "jc21/nginx-proxy-manager:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/proxy_mgr-logo.png",
      "name": "nginx-proxy-manager",
      "hostname": "nginx-proxy-manager",
      "network": "bunni_network",
      "officialDoc": "https://nginxproxymanager.com/setup/",
      "platform": "linux",
      "ports": [
        "80:80/tcp",
        "81:81/tcp",
        "443:443/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Nginx Proxy Manager",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/NPM/data",
          "container": "/data"
        },
        {
          "bind": "/mnt/Docker/NPM/letsencrypt",
          "container": "/etc/letsencrypt"
        }
      ],
      "webpage": "https://nginxproxymanager.com/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "PMM_NO_COUNTDOWN",
          "label": "PMM_NO_COUNTDOWN",
          "select": [
            {
              "default": "true",
              "text": "Run without displaying a countdown to the next scheduled run.",
              "value": "true"
            },
            {
              "text": "Run with displaying a countdown to the next scheduled run.",
              "value": "false"
            }
          ]
        }
      ],
      "description": "Python script to update metadata information for items in plex as well as automatically build collections and playlists.",
      "image": "meisnate12/plex-meta-manager:nightly",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/pmm-logo.png",
      "name": "plex-meta-manager",
      "hostname": "plex-meta-manager",
      "network": "bunni_network",
      "officialDoc": "https://metamanager.wiki/en/latest/home/guides/docker.html",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Plex Meta Manager",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/PlexMetaManager/config",
          "container": "/config"
        },
        {
          "bind": "/mnt/Docker/PlexMetaManager/metadata",
          "container": "/metadata"
        },
        {
          "bind": "/mnt/Docker/PlexMetaManager/assets",
          "container": "/assets"
        }
      ],
      "webpage": "https://github.com/meisnate12/Plex-Meta-Manager"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "A python script that syncs the movies, shows and ratings between trakt and Plex (without needing a PlexPass or Trakt VIP subscription)",
      "image": "taxel/plextraktsync:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/plextraktsync-logo.png",
      "name": "plextraktsync",
      "hostname": "plextraktsync",
      "network": "bunni_network",
      "officialDoc": "https://github.com/Taxel/PlexTraktSync#docker-compose",
      "platform": "linux",
      "restart_policy": "on-failure",
      "title": "PlexTraktSync",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/PlexTraktSync",
          "container": "/app/config"
        }
      ],
      "webpage": "https://github.com/Taxel/PlexTraktSync"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Prowlarr is a indexer manager/proxy built on the popular arr .net/reactjs base stack to integrate with your various PVR apps. Prowlarr supports both Torrent Trackers and Usenet Indexers. It integrates seamlessly with Sonarr, Radarr, Lidarr, and Readarr offering complete management of your indexers with no per app Indexer setup required (we do it all).",
      "image": "linuxserver/prowlarr:nightly",
      "registry": "lscr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/prowlarr-logo.png",
      "name": "prowlarr",
      "hostname": "prowlarr",
      "network": "bunni_network",
      "officialDoc": "https://github.com/linuxserver/docker-prowlarr/",
      "platform": "linux",
      "ports": [
        "9696:9696/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Prowlarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Prowlarr",
          "container": "/config"
        }
      ],
      "webpage": "https://prowlarr.com/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Radarr - A fork of Sonarr to work with movies à la Couchpotato.",
      "image": "linuxserver/radarr:nightly",
      "registry": "lscr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/radarr-logo.png",
      "name": "radarr",
      "hostname": "radarr",
      "network": "bunni_network",
      "officialDoc": "https://docs.linuxserver.io/images/docker-radarr",
      "platform": "linux",
      "ports": [
        "7878:7878/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Radarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Radarr",
          "container": "/config"
        }
      ],
      "webpage": "https://radarr.video/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Snippet Box is a simple self-hosted app for organizing your code snippets.",
      "image": "pawelmalak/snippet-box:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/snibox-logo.png",
      "name": "snippet-box",
      "hostname": "snippet-box",
      "network": "bunni_network",
      "officialDoc": "https://github.com/pawelmalak/snippet-box#with-docker",
      "platform": "linux",
      "ports": [
        "5010:5000/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Snippet-box",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Snippetbox",
          "container": "/app/data"
        }
      ],
      "webpage": "https://github.com/pawelmalak/snippet-box"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "PHP_POOL_NAME",
          "label": "PHP_POOL_NAME",
          "default": "speedtest-tracker_php",
          "description": "PHP Pool Name"
        },
        {
          "name": "DB_CONNECTION",
          "label": "DB_CONNECTION",
          "default": "sqlite",
          "description": "Database Connection"
        },
        {
          "name": "DB_DATABASE",
          "label": "DB_DATABASE",
          "default": "/app/database.sqlite",
          "description": "Database Name"
        }
      ],
      "description": "Run a Speedtest every hour and graph the results.",
      "image": "alexjustesen/speedtest-tracker:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/speedtest-tracker-logo.png",
      "name": "speedtest-tracker",
      "hostname": "speedtest-tracker",
      "network": "bunni_network",
      "officialDoc": "https://github.com/alexjustesen/speedtest-tracker#deployment",
      "platform": "linux",
      "ports": [
        "8765:80/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Speedtest Tracker",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/SpeedtestTracker",
          "container": "/app"
        }
      ],
      "webpage": "https://github.com/alexjustesen/speedtest-tracker"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "A bot for steamgifts.com",
      "image": "mcinj/docker-steamgifts-bot:latest",
      "registry": "docker.io",
      "logo": "",
      "name": "steamgifts-bot",
      "hostname": "steamgifts-bot",
      "network": "bunni_network",
      "officialDoc": "https://github.com/mcinj/steamgifts-bot#docker",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "SteamGifts Bot",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/SteamGiftsBot",
          "container": "/config"
        }
      ],
      "webpage": "https://github.com/mcinj/steamgifts-bot"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "URL",
          "label": "URL",
          "default": "yourdomain.url",
          "description": "Top url you have control over (customdomain.com if you own it, or customsubdomain.ddnsprovider.com if dynamic dns)."
        },
        {
          "name": "VALIDATION",
          "label": "VALIDATION",
          "select": [
            {
              "default": "http",
              "text": "Use HTTP Method",
              "value": "http"
            },
            {
              "text": "Use DNS Method",
              "value": "dns"
            },
            {
              "text": "Use DUCKDNS Method",
              "value": "duckdns"
            }
          ],
          "description": "Certbot validation method to use, options are http, dns or duckdns (dns method also requires DNSPLUGIN variable set) (duckdns method requires DUCKDNSTOKEN variable set, and the SUBDOMAINS variable must be either empty or set to wildcard)."
        },
        {
          "name": "SUBDOMAINS",
          "label": "SUBDOMAINS",
          "default": "www,",
          "description": "Subdomains you'd like the cert to cover (comma separated, no spaces) ie. www,ftp,cloud. For a wildcard cert, set this exactly to wildcard (wildcard cert is available via dns and duckdns validation only)"
        },
        {
          "name": "EXTRA_DOMAINS",
          "label": "EXTRA_DOMAINS",
          "default": "",
          "description": "Additional fully qualified domain names (comma separated, no spaces) ie. extradomain.com,subdomain.anotherdomain.org,*.anotherdomain.org"
        },
        {
          "name": "DNSPLUGIN",
          "label": "DNSPLUGIN",
          "default": "",
          "description": "DNS plugin to use for dns validation (only required if using dns validation method)"
        },
        {
          "name": "EMAIL",
          "label": "EMAIL",
          "default": "",
          "description": "Optional e-mail address used for cert expiration notifications (Required for ZeroSSL)."
        },
        {
          "name": "DOCKER_MODS",
          "label": "DOCKER_MODS",
          "default": "",
          "description": "linuxserver Docker Mods"
        },
        {
          "name": "WATCHLIST",
          "label": "WATCHLIST",
          "default": "",
          "description": "To be used with linuxserver/mods:swag-auto-reload"
        }
      ],
      "description": "This container sets up an Nginx webserver and reverse proxy with php support and a built-in letsencrypt client that automates free SSL server certificate generation and renewal processes. It also contains fail2ban for intrusion prevention.",
      "image": "linuxserver/swag:latest",
      "registry": "lscr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/swag-logo.png",
      "name": "swag",
      "hostname": "swag",
      "network": "bunni_network",
      "note": "Before running this container, make sure that the url and subdomains are properly forwarded to this container's host.<ul><li>- Port 443 on the internet side of the router should be forwarded to this container's port 443.</li><li>- If you need a dynamic dns provider, you can use the free provider duckdns.org where the url will be yoursubdomain.duckdns.org and the subdomains can be www,ftp,cloud</li><li>- The container detects changes to url and subdomains, revokes existing certs and generates new ones during start.</li><li>- It also detects changes to the DHLEVEL parameter and replaces the dhparams file.</li><li>- If you'd like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file <code>docker exec -it letsencrypt htpasswd -c /config/nginx/.htpasswd &lt;username&gt;</code>",
      "officialDoc": "https://docs.linuxserver.io/images/docker-swag",
      "platform": "linux",
      "ports": [
        "80:80/tcp",
        "443:443/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "SWAG",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Swag",
          "container": "/config"
        }
      ],
      "webpage": "https://github.com/linuxserver/docker-swag"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "Tautulli is a 3rd party application that you can run along side your Plex Media Server to monitor activity and track various statistics. Most importantly, these statistics include what has been watched, who watched it, when and where they watched it, and how it was watched. All statistics are presented in a nice and clean interface with many tables and graphs, which makes it easy to brag about your server to everyone else.",
      "image": "linuxserver/tautulli:latest",
      "registry": "lscr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/tautulli-logo.png",
      "name": "tautulli",
      "hostname": "tautulli",
      "network": "bunni_network",
      "officialDoc": "https://docs.linuxserver.io/images/docker-tautulli",
      "platform": "linux",
      "ports": [
        "8181:8181/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Tautulli",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Tautulli",
          "container": "/config"
        }
      ],
      "webpage": "https://tautulli.com/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "A simple and lightweight reverse proxy",
      "image": "traefik:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/traefik-logo.png",
      "name": "traefik",
      "hostname": "traefik",
      "network": "bunni_network",
      "officialDoc": "https://doc.traefik.io/traefik/getting-started/install-traefik/",
      "platform": "linux",
      "ports": [
        "80:80/tcp",
        "443:443/tcp",
        "8080:8080/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Traefik",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/Traefik/traefik.yml",
          "container": "/traefik.yml"
        },
        {
          "bind": "/mnt/Docker/Traefik/config.yml",
          "container": "/config.yml"
        },
        {
          "bind": "/mnt/Docker/Traefik/acme.json",
          "container": "/acme.json"
        },
        {
          "bind": "/var/run/docker.sock",
          "container": "/var/run/docker.sock"
        }
      ],
      "webpage": "https://doc.traefik.io/traefik/"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "A Node.js bot that uses Puppeteer to automatically watch Twitch streams and claim drop rewards.",
      "image": "tychothetaco/twitch-drops-bot:latest",
      "registry": "ghcr.io",
      "logo": "",
      "name": "twitch-drops-bot",
      "hostname": "twitch-drops-bot",
      "network": "bunni_network",
      "officialDoc": "https://github.com/TychoTheTaco/Twitch-Drops-Bot#docker",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Twitch Drops Bot",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/TwitchDropsBot",
          "container": "/app/data"
        }
      ],
      "webpage": "https://github.com/TychoTheTaco/Twitch-Drops-Bot"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        },
        {
          "name": "TERM",
          "label": "TERM",
          "default": "xterm-256color",
          "description": ""
        }
      ],
      "description": "A simple script that will watch a stream for you and earn the channel points.",
      "image": "tkdalex/twitch-channel-points-miner-v2:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/twitch-miner-logo.png",
      "name": "twitch-miner",
      "hostname": "twitch-miner",
      "network": "bunni_network",
      "note": "First create a run.py file before running container. You can just copy [example.py](https://github.com/Tkd-Alex/Twitch-Channel-Points-Miner-v2/blob/master/example.py) and modify it according to your needs.",
      "officialDoc": "https://github.com/Tkd-Alex/Twitch-Channel-Points-Miner-v2#docker",
      "platform": "linux",
      "ports": [
        "5000:5000/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Twitch Miner",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/TwitchMiner/analytics",
          "container": "/usr/src/app/analytics"
        },
        {
          "bind": "/mnt/Docker/TwitchMiner/cookies",
          "container": "/usr/src/app/cookies"
        },
        {
          "bind": "/mnt/Docker/TwitchMiner/logs",
          "container": "/usr/src/app/logs"
        },
        {
          "bind": "/mnt/Docker/TwitchMiner/run.py",
          "container": "/usr/src/app/run.py"
        }
      ],
      "webpage": "https://github.com/Tkd-Alex/Twitch-Channel-Points-Miner-v2"
    },
    {
      "categories": [],
      "env": [
        {
          "name": "PUID",
          "label": "PUID",
          "default": "1000",
          "description": "for UserID"
        },
        {
          "name": "PGID",
          "label": "PGID",
          "default": "1000",
          "description": "for GroupID"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "It is a self-hosted monitoring tool like 'Uptime Robot'.",
      "image": "louislam/uptime-kuma:latest",
      "registry": "docker.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/uptime-kuma-logo.png",
      "name": "uptime-kuma",
      "hostname": "uptime-kuma",
      "network": "bunni_network",
      "officialDoc": "https://github.com/louislam/uptime-kuma/wiki/%F0%9F%94%A7-How-to-Install#-docker",
      "platform": "linux",
      "ports": [
        "3001:3001/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Uptime Kuma",
      "type": 1,
      "volumes": [
        {
          "bind": "/mnt/Docker/UptimeKuma",
          "container": "/app/data"
        }
      ],
      "webpage": "https://github.com/louislam/uptime-kuma"
    },
    {
      "categories": [],
      "env": [
        {
          "label": "WATCHTOWER_CLEANUP",
          "name": "WATCHTOWER_CLEANUP",
          "select": [
            {
              "default": "true",
              "text": "Delete unused images",
              "value": "true"
            },
            {
              "text": "Keep unused images",
              "value": "false"
            }
          ]
        },
        {
          "name": "WATCHTOWER_SCHEDULE",
          "label": "WATCHTOWER_SCHEDULE",
          "default": "0 0 */8 * * *",
          "description": "Cron expression in 6 fields (rather than the traditional 5) which defines when and how often to check for new images"
        },
        {
          "name": "TZ",
          "label": "TZ",
          "default": "America/Chicago",
          "description": "Specify a timezone to use for example America/New_York"
        }
      ],
      "description": "With watchtower you can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially.",
      "image": "containrrr/watchtower:latest",
      "registry": "ghcr.io",
      "logo": "https://raw.githubusercontent.com/JourneyOver/selfhosted_templates/main/images/watchtower-logo.png",
      "name": "watchtower",
      "hostname": "watchtower",
      "network": "bunni_network",
      "note": "It is recommended to manually update your containers but we're including this for those of you that don't care",
      "officialDoc": "https://containrrr.dev/watchtower/usage-overview/",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Watchtower",
      "type": 1,
      "volumes": [
        {
          "bind": "/var/run/docker.sock",
          "container": "/var/run/docker.sock"
        }
      ],
      "webpage": "https://containrrr.dev/watchtower/"
    }
  ]
}
